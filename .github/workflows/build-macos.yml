name: Build macOS Application

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.6.0'
          # Optionally add Qt modules if needed

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Find .pro file
        id: find_pro
        run: |
          PRO_FILE=$(find . -maxdepth 1 -name "*macos*.pro" -print -quit)
          if [ -z "$PRO_FILE" ]; then
            PRO_FILE=$(find . -maxdepth 1 -name "*.pro" -print -quit)
          fi
          if [ -z "$PRO_FILE" ]; then
            echo "::error::No .pro file found!"
            exit 1
          fi
          echo "Found project file: $PRO_FILE"
          echo "pro_file=$PRO_FILE" >> "$GITHUB_OUTPUT"

      - name: Build application
        run: |
          qmake "${{ steps.find_pro.outputs.pro_file }}" CONFIG+=release
          make -j$(sysctl -n hw.logicalcpu)

      - name: List all files after build
        run: ls -lR .

      - name: Find the .app bundle and verify it exists
        id: find_app
        run: |
          APP_PATH=$(find . -type d -name "*.app" -print -quit)
          if [ -z "$APP_PATH" ]; then
            echo "::error::Build failed: The .app bundle was not found after compilation."
            exit 1
          fi
          echo "App bundle found at: $APP_PATH"
          echo "app_path=$APP_PATH" >> "$GITHUB_OUTPUT"

      - name: Deploy Qt libraries
        run: macdeployqt "${{ steps.find_app.outputs.app_path }}"

      - name: Embed Python and Scripts
        if: ${{ steps.find_app.outputs.app_path != '' }}
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          mkdir -p "$APP_PATH/Contents/Resources/"
          if [ -d scripts ]; then
            cp -R scripts/ "$APP_PATH/Contents/Resources/scripts"
          fi
          PY_INSTALL_DIR=$(dirname $(dirname $(which python)))
          cp -R "$PY_INSTALL_DIR" "$APP_PATH/Contents/Resources/python"

      - name: Create DMG
        run: macdeployqt "${{ steps.find_app.outputs.app_path }}" -dmg

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: PythonRunner-macOS
          path: "*.dmg"
